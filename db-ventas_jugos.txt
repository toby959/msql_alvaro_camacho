CREATE DATABASE ventas_jugos;
DROP DATABASE ventas_jugos;
CREATE SCHEMA IF NOT EXISTS ventas_jugos;

CREATE TABLE tb_vendedor(
MATRICULA VARCHAR(5) NOT NULL,
NOMBRE VARCHAR(100) NULL,
BARRIO VARCHAR(50) NULL,
COMISION FLOAT NULL,
FECHA__ADMISION DATE NULL,
DE_VACACIONES BIT(1) NULL,
PRIMARY KEY (MATRICULA)
);
CREATE TABLE tb_productos(
CODIGO VARCHAR(10) NOT NULL,
DESCRIPCION VARCHAR(100) NULL,
SABOR VARCHAR(50) NULL,
TAMANO VARCHAR(50) NULL,
ENVASE VARCHAR(50) NULL,
PRECIO_LISTA FLOAT NULL,
PRIMARY KEY (CODIGO)
);
CREATE TABLE cliente(
    DNI VARCHAR(20) NOT NULL,
    NOMBRE VARCHAR(100) NULL,
    DIRECCION VARCHAR(150) NULL,
    BARRIO VARCHAR(100) NULL,
    CIUDAD VARCHAR(100) NULL,
    ESTADO VARCHAR(50) NULL,
    CP VARCHAR(8) NULL,
    FECHA_NACIMIENTO DATE NULL,
    EDAD INT(2) NULL,
    SEXO VARCHAR(1) NULL,
    LIMITE_CREDITO FLOAT NULL,
    VOLUMEN_COMPRA FLOAT NULL,
    PRIMERA_COMPRA BIT(1) NULL,
    PRIMARY KEY (DNI)
);
DROP TABLE cliente;
RENAME TABLE cliente TO tb_cliente;

CREATE TABLE tb_ventas(
NUMERO VARCHAR(5) NOT NULL,
FECHA DATE NULL,
DNI VARCHAR(11) NOT NULL,
MATRICULA VARCHAR(5) NOT NULL,
IMPUESTO FLOAT,
PRIMARY KEY (NUMERO)
);

ALTER TABLE tb_ventas ADD CONSTRAINT FK_CLIENTE
FOREIGN KEY(DNI) REFERENCES tb_cliente(DNI); 

ALTER TABLE tb_ventas ADD CONSTRAINT FK_VENDEDOR
FOREIGN KEY(MATRICULA) REFERENCES tb_vendedor(MATRICULA); 

CREATE TABLE items_facturas (
NUMERO VARCHAR(5) NOT NULL,
CODIGO VARCHAR(10) NOT NULL,
CANTIDAD INT,
PRECIO FLOAT,
PRIMARY KEY (NUMERO, CODIGO) 
);


ALTER TABLE items_facturas ADD CONSTRAINT FK_FACTURAS
FOREIGN KEY(NUMERO) REFERENCES facturas(NUMERO); 

ALTER TABLE tb_ventas RENAME tb_factura;

ALTER TABLE items_facturas RENAME tb_items_facturas;

-- ALTER TABLE tb_items_facturas ADD CONSTRAINT FK_FACTURA
-- FOREIGN KEY(NUMERO) REFERENCES tb_factura(NUMERO); 

-- ALTER TABLE tb_items_facturas ADD CONSTRAINT FK_PRODUCTO
-- FOREIGN KEY(CODIGO) REFERENCES tb_productos(CODIGO); 


ALTER TABLE tb_factura ADD CONSTRAINT FK_CLIENTE
FOREIGN KEY (DNI) REFERENCES tb_cliente(DNI);

ALTER TABLE tb_factura ADD CONSTRAINT FK_VENDEDOR
FOREIGN KEY (MATRICULA) REFERENCES tb_cliente(MATRICULA);

SELECT CONSTRAINT_NAME
FROM information_schema.KEY_COLUMN_USAGE
WHERE TABLE_SCHEMA = 'ventas_jugos' AND CONSTRAINT_NAME LIKE 'FK_CLIENTE'; 


SELECT TABLE_NAME, CONSTRAINT_NAME
FROM information_schema.KEY_COLUMN_USAGE
WHERE TABLE_SCHEMA = 'ventas_jugos' AND CONSTRAINT_NAME LIKE 'FK_CLIENTE';

ALTER TABLE tb_factura
___________________ 2do intento  _____________________________
CREATE SCHEMA IF NOT EXISTS ventas_jugos;

CREATE TABLE tb_vendedor(
MATRICULA VARCHAR(5) NOT NULL,
NOMBRE VARCHAR(100) NULL,
BARRIO VARCHAR(50) NULL,
COMISION FLOAT NULL,
FECHA__ADMISION DATE NULL,
DE_VACACIONES BIT(1) NULL,
PRIMARY KEY (MATRICULA)
);

CREATE TABLE tb_productos(
CODIGO VARCHAR(10) NOT NULL,
DESCRIPCION VARCHAR(100) NULL,
SABOR VARCHAR(50) NULL,
TAMANO VARCHAR(50) NULL,
ENVASE VARCHAR(50) NULL,
PRECIO_LISTA FLOAT NULL,
PRIMARY KEY (CODIGO)
);
CREATE TABLE cliente(
    DNI VARCHAR(20) NOT NULL,
    NOMBRE VARCHAR(100) NULL,
    DIRECCION VARCHAR(150) NULL,
    BARRIO VARCHAR(100) NULL,
    CIUDAD VARCHAR(100) NULL,
    ESTADO VARCHAR(50) NULL,
    CP VARCHAR(8) NULL,
    FECHA_NACIMIENTO DATE NULL,
    EDAD INT(2) NULL,
    SEXO VARCHAR(1) NULL,
    LIMITE_CREDITO FLOAT NULL,
    VOLUMEN_COMPRA FLOAT NULL,
    PRIMERA_COMPRA BIT(1) NULL,
    PRIMARY KEY (DNI)
);

CREATE TABLE items_facturas (
NUMERO VARCHAR(5) NOT NULL,
CODIGO VARCHAR(10) NOT NULL,
CANTIDAD INT,
PRECIO FLOAT,
PRIMARY KEY (NUMERO, CODIGO) 
);

CREATE TABLE tb_ventas(
NUMERO VARCHAR(5) NOT NULL,
FECHA DATE NULL,
DNI VARCHAR(11) NOT NULL,
MATRICULA VARCHAR(5) NOT NULL,
IMPUESTO FLOAT,
PRIMARY KEY (NUMERO)
);

RENAME TABLE cliente TO tb_cliente;

RENAME TABLE items_facturas TO tb_items_facturas;

-- Usando SHOW KEYS FROM
SHOW KEYS FROM tb_vendedor WHERE Key_name = 'PRIMARY';

-- ALTER TABLE tb_factura
-- ADD CONSTRAINT fk_matricula_vendedor
-- FOREIGN KEY (MATRICULA)
-- REFERENCES tb_vendedor (MATRICULA);

-- ALTER TABLE tb_factura
-- ADD CONSTRAINT fk_dni_cliente
-- FOREIGN KEY (DNI)
-- REFERENCES tb_cliente (DNI);

-- CREATE TABLE tb_factura (
   -- Otras columnas...
--   MATRICULA tipo_de_dato,
   -- Otras columnas...
--   FOREIGN KEY (MATRICULA) REFERENCES tb_vendedor (MATRICULA)
-- );

-- ALTER TABLE tb_items_facturas
-- ADD CONSTRAINT fk_numero_factura
-- FOREIGN KEY (NUMERO)
-- REFERENCES tb_factura (NUMERO);

-- ALTER TABLE tb_items_facturas
-- ADD CONSTRAINT fk_codigo_producto
-- FOREIGN KEY (CODIGO)
-- REFERENCES tb_productos (CODIGO);

USE ventas_jugos;

INSERT INTO tb_productos(CODIGO, DESCRIPCION, SABOR, TAMANO, ENVASE, PRECIO_LISTA) VALUES(
"1040107", "Ligth", "Sandia", "350 ml", "Lata", 4.56);

SELECT * FROM tb_productos;

INSERT INTO tb_productos(CODIGO, DESCRIPCION, SABOR, TAMANO, ENVASE, PRECIO_LISTA) VALUES(
"1040108", "Ligth", "Banana", "350 ml", "Lata", 4.00);

INSERT INTO tb_productos VALUES(
"1040109", "Ligth", "Pera", "350 ml", "Lata", 5.60), (
"1040110", "Ligth", "Manzana", "350 ml", "Lata", 6.60), (
"1040111", "Ligth", "Mango", "350 ml", "Lata", 7.00);

INSERT INTO tb_cliente VALUES(
"9283760794", "Edson Calisaya", "Sta Úrsula Xitla", "Barrio del Niño Jesús", "Ciudad de México", " EM", "22002002", "1995-01-07", 25, "M", 150000, 250000, 1), (
'7771579779', 'Marcelo Perez', 'F.C. de Cuernavaca 13', 'Carola', 'Ciudad de México', 'EM', '88202912', '1992-01-25', 29, 'M', 120000, 200000, 1), (
'5576228758', 'Patricia Olivera', 'Pachuca 75',  'Condesa', 'Ciudad de México', 'EM', '88192029', '1995-01-14', 25, 'F', 70000, 160000, 1);
_______________________________________________________________
_______________________________________________________________
File => Export => Forward Engenner SQL CREATE Script => (agregamos nombre al archivo) NO OLVIDAR seleccionar la carpeta donde guardamos el archivo => next => next => finish
_______________________________________________________________

click en Administration(debajo de las DB) => Data Import/Restore => buscamos donde la tenemos almacenada => DumpJugosVentas => Start Import
_______________________________________________________________
Para import datos a una tabla => click sobre la tabla => Table Data Import Wizard => seleccionamos el archivo a importar => abrir => next => next => next => next => finish
_______________________________________________________________
dar click en el espacio donde dice 'Form Editor' (costado derecho de nuestras tablas) para cargar datos. 
_______________________________________________________________  

Damos click sobre la tabla 'tb_productos' => Send to SQL Editor => Create Statement
_______________________________________________________________
USE ventas_jugos;


SELECT * FROM jugos_ventas.tabla_de_productos;

INSERT INTO tb_productos
SELECT CODIGO_DEL_PRODUCTO AS CODIGO, NOMBRE_DEL_PRODUCTO AS DESCRIPCION,
SABOR, TAMANO, ENVASE, PRECIO_DE_LISTA AS PRECIO_LISTA FROM jugos_ventas.tabla_de_productos
WHERE CODIGO_DEL_PRODUCTO NOT IN (SELECT CODIGO FROM tb_productos); 

SELECT * FROM tb_productos;

INSERT INTO tb_productos
SELECT CODIGO_DEL_PRODUCTO AS CODIGO, NOMBRE_DEL_PRODUCTO AS DESCRIPCION,
       SABOR, TAMANO, ENVASE, PRECIO_DE_LISTA AS PRECIO_LISTA
FROM jugos_ventas.tabla_de_productos
WHERE CODIGO_DEL_PRODUCTO NOT IN (SELECT CODIGO FROM tb_productos)
ORDER BY CODIGO_DEL_PRODUCTO DESC;

INSERT INTO tb_productos

SELECT CODIGO_DEL_PRODUCTO AS CODIGO, NOMBRE_DEL_PRODUCTO AS DESCRIPCION,
       SABOR, TAMANO, ENVASE, PRECIO_DE_LISTA AS PRECIO_LISTA
FROM jugos_ventas.tabla_de_productos
WHERE CODIGO_DEL_PRODUCTO NOT IN (SELECT CODIGO FROM tb_productos)
ORDER BY CODIGO_DEL_PRODUCTO DESC;

INSERT INTO tb_cliente
SELECT DNI, NOMBRE, 
       CONCAT(DIRECCION_1, ' ', DIRECCION_2) AS DIRECCION, 
       'Sin especificar' AS BARRIO, CIUDAD, ESTADO, CP, 
       FECHA_DE_NACIMIENTO AS FECHA_NACIMIENTO, EDAD, SEXO, 
       LIMITE_DE_CREDITO AS LIMITE_CREDITO, 
       VOLUMEN_DE_COMPRA AS VOLUMEN_COMPRA, PRIMERA_COMPRA
FROM jugos_ventas.tabla_de_clientes
WHERE DNI NOT IN (SELECT DNI FROM tb_cliente);

SELECT * FROM tb_vendedor;

UPDATE tb_productos SET PRECIO_LISTA= 5 WHERE CODIGO= "1000889";

-- Deshabilitar el modo de actualización segura
SET SQL_SAFE_UPDATES = 0;
-- Ejecutar tu sentencia de actualización
UPDATE tb_cliente SET VOLUMEN_COMPRA = VOLUMEN_COMPRA / 10;
-- Habilitar el modo de actualización segura nuevamente
SET SQL_SAFE_UPDATES = 1;

-- actualizar datos de cliente 
UPDATE tb_cliente SET DIRECCION= "Jorge Emilio 23", BARRIO=  "San Antonio", CIUDAD= "Guadalajara", ESTADO= "de Jalisco", CP= 44700000 WHERE DNI= "5840119709";

-- para ver dos tablas diferentes de las DB
SELECT * FROM tb_vendedor;

SELECT * FROM jugos_ventas.tabla_de_vendedores;

UPDATE tb_productos SET DESCRIPCION= "Sabor de la Montaña",
TAMANO= "1 Litro", ENVASE="Botella PET" WHERE CODIGO= "1000889";

-- unir dos tablas
SELECT * FROM tb_vendedor A
INNER JOIN 
jugos_ventas.tabla_de_vendedores B
ON A.MATRICULA = SUBSTRING(B.MATRICULA,3,3);

-- juntar los datos de VACIONES
UPDATE tb_vendedor A
INNER JOIN 
jugos_ventas.tabla_de_vendedores B
ON A.MATRICULA = SUBSTRING(B.MATRICULA,3,3)
SET A.DE_VACACIONES= B.VACACIONES;

-- unimos tabla clientes con vendedor (Esta consulta devuelve los DNI de los clientes que viven en el mismo barrio que algún vendedor.)
SELECT A.DNI FROM tb_cliente A
INNER JOIN tb_vendedor B
ON A.BARRIO = B.BARRIO;

SET SQL_SAFE_UPDATES = 0;
UPDATE tb_cliente A
INNER JOIN tb_vendedor B ON (A.BARRIO = B.BARRIO)
SET A.VOLUMEN_COMPRA = A.VOLUMEN_COMPRA * 1.30;
SET SQL_SAFE_UPDATES = 1;

-- cargar datos
INSERT INTO tb_productos (CODIGO,DESCRIPCION,SABOR,TAMANO,ENVASE,PRECIO_LISTA)
     VALUES ('1001001','Sabor Alpino','Mango','700 ml','Botella',7.50),
         ('1001000','Sabor Alpino','Mel n','700 ml','Botella',7.50),
         ('1001002','Sabor Alpino','Guan bana','700 ml','Botella',7.50),
         ('1001003','Sabor Alpino','Mandarina','700 ml','Botella',7.50),
         ('1001004','Sabor Alpino','Banana','700 ml','Botella',7.50),
         ('1001005','Sabor Alpino','Asa ','700 ml','Botella',7.50),
         ('1001006','Sabor Alpino','Mango','1 Litro','Botella',7.50),
         ('1001007','Sabor Alpino','Mel n','1 Litro','Botella',7.50),
         ('1001008','Sabor Alpino','Guan bana','1 Litro','Botella',7.50),
         ('1001009','Sabor Alpino','Mandarina','1 Litro','Botella',7.50),
         ('1001010','Sabor Alpino','Banana','1 Litro','Botella',7.50),
         ('1001011','Sabor Alpino','Asa ','1 Litro','Botella',7.50);


SELECT * FROM tb_productos WHERE DESCRIPCION = 'Sabor Alpino'; 

-- borrar x CODIGO
DELETE FROM tb_productos WHERE CODIGO= "1001000"; 

-- borrar x TAMANO
SET SQL_SAFE_UPDATES = 0;
DELETE FROM tb_productos WHERE TAMANO= "1 Litro";
SET SQL_SAFE_UPDATES = 1; 

-- muestra el codigo de los productos  
SELECT CODIGO_DEL_PRODUCTO FROM jugos_ventas.tabla_de_productos;

-- muestra donde no esta el codigo en la otra tabla
SELECT CODIGO FROM tb_productos
WHERE CODIGO NOT IN (SELECT CODIGO_DEL_PRODUCTO 
FROM jugos_ventas.tabla_de_productos);

-- sincronizar las tablas
SET SQL_SAFE_UPDATES = 0;
DELETE FROM tb_productos
WHERE CODIGO NOT IN (SELECT CODIGO_DEL_PRODUCTO 
FROM jugos_ventas.tabla_de_productos);
SET SQL_SAFE_UPDATES = 1;

-- excluir las facturas cuyos clientes tengan menos de 18 años.
-- mal
SELECT A.DNI 
FROM tb_cliente A
INNER JOIN tb_vendedor B
WHERE TIMESTAMPDIFF(YEAR, A.FECHA_NACIMIENTO, CURDATE()) >= 18;

-- excluir las facturas cuyos clientes tengan menos de 18 años.
SET SQL_SAFE_UPDATES = 0;
DELETE FROM tb_cliente 
WHERE TIMESTAMPDIFF(YEAR, FECHA_NACIMIENTO, CURDATE()) < 18;
SET SQL_SAFE_UPDATES = 1;

-- crear una tabla y actualizar , borrarla a toda
CREATE TABLE `tb_productos2` (
  `CODIGO` varchar(10) NOT NULL,
  `DESCRIPCION` varchar(100) DEFAULT NULL,
  `SABOR` varchar(50) DEFAULT NULL,
  `TAMANO` varchar(50) DEFAULT NULL,
  `ENVASE` varchar(50) DEFAULT NULL,
  `PRECIO_LISTA` float DEFAULT NULL,
  PRIMARY KEY (`CODIGO`)
);

-- trae vacia 
SELECT * FROM tb_productos2;

-- cargar 
INSERT INTO tb_productos2
SELECT * FROM tb_productos; 

-- actualizar los precios 15 %
SET SQL_SAFE_UPDATES = 0;
UPDATE tb_productos2 SET PRECIO_LISTA = PRECIO_LISTA* 1.15;
SET SQL_SAFE_UPDATES = 1;

-- borrar toda la tabla
SET SQL_SAFE_UPDATES = 0;
DELETE FROM tb_productos2;
SET SQL_SAFE_UPDATES = 1;

-- alterando y excluyendo datos existentes en las tablas
INSERT INTO `ventas_jugos`.`tb_vendedor`
(`MATRICULA`,
`NOMBRE`,
`BARRIO`,
`COMISION`,
`FECHA__ADMISION`,
`DE_VACACIONES`)
VALUES
("255",
"Tobias",
"Patron",
0.3,
"2022-08-13",
0);

SELECT * FROM tb_vendedor;

START TRANSACTION; 

INSERT INTO `ventas_jugos`.`tb_vendedor`
(`MATRICULA`,
`NOMBRE`,
`BARRIO`,
`COMISION`,
`FECHA__ADMISION`,
`DE_VACACIONES`)
VALUES
("256",
"Toto Gary",
"Parque",
0.3,
"2024-08-13",
1);
INSERT INTO `ventas_jugos`.`tb_vendedor`
(`MATRICULA`,
`NOMBRE`,
`BARRIO`,
`COMISION`,
`FECHA__ADMISION`,
`DE_VACACIONES`)
VALUES
("257",
"Ozalinga Orly",
"SEP",
0.3,
"2024-03-12",
1);

-- aumento comision 
SET SQL_SAFE_UPDATES = 0;
UPDATE tb_vendedor SET COMISION=  COMISION * 1.05;
SET SQL_SAFE_UPDATES = 1;


-- volvewr atras
ROLLBACK;

-- confirmacion
COMMIT;

-- Autoincremento patrones y triggers
CREATE TABLE tb_identificacion(
ID INT AUTO_INCREMENT NOT NULL,
DESCRIPCION VARCHAR (50) NULL,
PRIMARY KEY(ID)
);
SELECT * FROM tb_identificacion;

INSERT INTO tb_identificacion(DESCRIPCION)
VALUES("Cliente A");

INSERT INTO tb_identificacion(DESCRIPCION)
VALUES("Cliente B");
INSERT INTO tb_identificacion(DESCRIPCION)
VALUES("Cliente C");
INSERT INTO tb_identificacion(DESCRIPCION)
VALUES("Cliente D");

DELETE FROM tb_identificacion WHERE ID= "3";

-- forzar el cambio de numero ID - lo unico que no se puede es pasar 'null'
INSERT INTO tb_identificacion(ID, DESCRIPCION)
VALUES(100, "Cliente G");

INSERT INTO tb_identificacion(DESCRIPCION)
VALUES("Cliente H");

-- patrones o campos de estado
CREATE TABLE tb_default(
ID INT AUTO_INCREMENT,
DESCRIPCION VARCHAR(50) NOT NULL,
DIRECCION VARCHAR(100) NULL,
CIUDAD VARCHAR(50)  DEFAULT "Monterrey",
FECHA_CREACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
PRIMARY KEY(ID)
); 

SELECT * FROM tb_default;

INSERT INTO tb_default(DESCRIPCION, DIRECCION, CIUDAD, FECHA_CREACION)
VALUES("Cliente X", "calle s/n", "Tijuana", "2025-01-13");


INSERT INTO tb_default(DESCRIPCION)
VALUES("Cliente Y");

-- triggers
CREATE TABLE tb_facturacion(
FECHA DATE NULL,
VENTA_TOTAL FLOAT);

CREATE TABLE `tb_items_facturas1` (
  `NUMERO` varchar(5) NOT NULL,
  `CODIGO` varchar(10) NOT NULL,
  `CANTIDAD` int DEFAULT NULL,
  `PRECIO` float DEFAULT NULL,
  PRIMARY KEY (`NUMERO`,`CODIGO`),
  KEY `fk_codigo_producto1` (`CODIGO`),
  CONSTRAINT `fk_codigo_producto1` FOREIGN KEY (`CODIGO`) REFERENCES `tb_productos` (`CODIGO`),
  CONSTRAINT `fk_numero_factura1` FOREIGN KEY (`NUMERO`) REFERENCES `tb_factura` (`NUMERO`)
);
SELECT * FROM tb_items_facturas1;
SELECT * FROM tb_factura1;
SELECT * FROM tb_cliente;
SELECT * FROM tb_vendedor;
SELECT * FROM tb_productos;

-- tabla tb_factura1 
INSERT INTO tb_factura1 
VALUES("0100", "2025-01-20", "1471156710", "235", 0.10);

-- tabla tb_items_facturas1
INSERT INTO tb_items_facturas1 
VALUES("0100", "1002767", 111, 25),
("0100", "1004327", 101, 25),
("0100", "1013793", 301, 25);

-- prueba
SELECT NUMERO FROM tb_factura1 WHERE NUMERO IN ('0100', '1002767', '1004327', '1013793');

-- forzar la carga
SET FOREIGN_KEY_CHECKS = 0;
INSERT INTO tb_items_facturas1 VALUES ("0100", "1002767", 111, 25), ("0100", "1004327", 101, 25), ("0100", "1013793", 301, 25);
SET FOREIGN_KEY_CHECKS = 1;

-- inner joins entre SELECT * FROM tb_items_facturas1; SELECT * FROM tb_factura1;
SELECT A.FECHA, SUM(B.CANTIDAD * B.PRECIO) AS VENTA_TOTAL
 FROM tb_factura1 A 
 INNER JOIN
 tb_items_facturas1 B
 ON A.NUMERO = B.NUMERO
 GROUP BY A.FECHA;
 
 -- automatizar la carga de factura
 -- // marca el limite del recorrido de la ejecucion (se debe seleccionar desde el Delimiter hasta end)
 DELIMITER //
 
 CREATE TRIGGER TG_FACTURACION_INSERT
 AFTER INSERT ON tb_items_facturas1
 FOR EACH ROW BEGIN
   DELETE FROM tb_facturacion;
   INSERT INTO tb_facturacion
   SELECT A.FECHA, SUM(B.CANTIDAD * B.PRECIO) AS VENTA_TOTAL
   FROM tb_factura1 A 
   INNER JOIN
   tb_items_facturas1 B
   ON A.NUMERO = B.NUMERO
   GROUP BY A.FECHA;
  END//
  -- verificar tabla tb_facturacion
SELECT * FROM tb_facturacion;  
  
  -- cargamos nuevos datos a factura
SET SQL_SAFE_UPDATES = 0;
INSERT IGNORE INTO tb_factura1 
VALUES("0103", "2025-01-20", "1471156710", "235", 0.10);
INSERT INTO tb_items_facturas1
VALUES("0103", "1002767", 200, 25),
("0103", "10043327", 300, 25),
("0103", "1013793", 400, 25);
SET SQL_SAFE_UPDATES = 1;

-- verificar numero
SELECT * FROM tb_factura1 WHERE NUMERO = '0103';

-- reload
SET SQL_SAFE_UPDATES = 0;
INSERT IGNORE INTO tb_factura1 
VALUES("0104", "2025-01-20", "1471156710", "235", 0.10);
INSERT INTO tb_items_facturas1
VALUES("0104", "1002767", 300, 25),
("0104", "10043327", 700, 35),
("0104", "1013793", 500, 25);
SET SQL_SAFE_UPDATES = 1;

-- trigger por edad
DELIMITER //
CREATE TRIGGER TG_EDAD_CLIENTES_INSERT 
BEFORE INSERT ON tb_cliente
FOR EACH ROW BEGIN
SET NEW.EDAD = TIMESTAMPDIFF(YEAR, NEW.FECHA_NACIMIENTO, NOW());
END//
-- muestra la esctructura de la tabla
DESCRIBE tb_cliente;

SELECT * FROM tb_cliente;

-- cargar menor de edad
INSERT INTO tb_cliente (
    DNI,
    NOMBRE,
    DIRECCION,
    BARRIO,
    CIUDAD,
    ESTADO,
    CP,
    FECHA_NACIMIENTO,
    EDAD,
    SEXO,
    LIMITE_CREDITO,
    VOLUMEN_COMPRA,
    PRIMERA_COMPRA
)
VALUES (
    '12345678', -- DNI
    'Juanito', -- NOMBRE
    'Calle 123', -- DIRECCION
    'Centro', -- BARRIO
    'Ciudad', -- CIUDAD
    'Estado', -- ESTADO
    '1000', -- CP
    '2010-01-01', -- FECHA_NACIMIENTO (menor de 18 años)
    13, -- EDAD
    'M', -- SEXO
    0.0, -- LIMITE_CREDITO
    0.0, -- VOLUMEN_COMPRA
    1 -- PRIMERA_COMPRA
);

-- ver los tigger existentes
SELECT TRIGGER_NAME 
FROM information_schema.TRIGGERS 
WHERE TRIGGER_SCHEMA = 'ventas_jugos' AND EVENT_OBJECT_TABLE = 'tb_cliente';
-- eliminar el trigger
DROP TRIGGER TG_EDAD_CLIENTES_INSERT;

-- new trigger}
DELIMITER $$

CREATE TRIGGER TG_EDAD_CLIENTES_INSERT
BEFORE INSERT ON tb_cliente
FOR EACH ROW
BEGIN
    SET NEW.EDAD = TIMESTAMPDIFF(YEAR, NEW.FECHA_NACIMIENTO, CURDATE());
END$$

DELIMITER ;

SELECT * FROM tb_facturacion; 
SELECT * FROM tb_factura1;
SELECT * FROM tb_items_facturas1;

-- modificar valor CANTIDAD en tb_items_facturas1
UPDATE tb_items_facturas1 SET CANTIDAD = 600
WHERE NUMERO = '0100' AND CODIGO = '1002767';

-- trigger delete
DELIMITER //
 CREATE TRIGGER TG_FACTURACION_DELETE
 AFTER DELETE ON tb_items_facturas1
 FOR EACH ROW BEGIN
   DELETE FROM tb_facturacion;
   INSERT INTO tb_facturacion
   SELECT A.FECHA, SUM(B.CANTIDAD * B.PRECIO) AS VENTA_TOTAL
   FROM tb_factura1 A 
   INNER JOIN
   tb_items_facturas1 B
   ON A.NUMERO = B.NUMERO
   GROUP BY A.FECHA;
  END//

-- trigger update
DELIMITER // 
 CREATE TRIGGER TG_FACTURACION_UPDATE
 AFTER UPDATE ON tb_items_facturas1
 FOR EACH ROW BEGIN
   DELETE FROM tb_facturacion;
   INSERT INTO tb_facturacion
   SELECT A.FECHA, SUM(B.CANTIDAD * B.PRECIO) AS VENTA_TOTAL
   FROM tb_factura1 A 
   INNER JOIN
   tb_items_facturas1 B
   ON A.NUMERO = B.NUMERO   
   GROUP BY A.FECHA;
  END//
  
-- hacemos un update  
SET SQL_SAFE_UPDATES = 0;
UPDATE tb_items_facturas1 SET CANTIDAD = 900
WHERE NUMERO = '0100' AND CODIGO = '1002767';
SET SQL_SAFE_UPDATES = 1;

-- hacemos un delete
SET SQL_SAFE_UPDATES = 0;
DELETE FROM tb_items_facturas1
WHERE NUMERO = '0104' AND CODIGO = '1002767';
SET SQL_SAFE_UPDATES = 1;  